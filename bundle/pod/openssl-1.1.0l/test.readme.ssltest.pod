=encoding utf-8


=head1 SSL tests


SSL testcases are configured in the C<ssl-tests> directory.

Each C<ssl_*.conf.in> file contains a number of test configurations. These files
are used to generate testcases in the OpenSSL CONF format.

The precise test output can be dependent on the library configuration. The test
harness generates the output files on the fly.

However, for verification, we also include checked-in configuration outputs
corresponding to the default configuration. These testcases live in
C<test/ssl-tests/*.conf> files.

For more details, see C<ssl-tests/01-simple.conf.in> for an example.


=head2 Configuring the test


First, give your test a name. The names do not have to be unique.

An example test input looks like this:


        {
            name => "test-default",
            server => { "CipherString" => "DEFAULT" },
            client => { "CipherString" => "DEFAULT" },
            test   => { "ExpectedResult" => "Success" },
        }

The test section supports the following options


=head3 Test mode



=over


=item *

Method - the method to test. One of DTLS or TLS.


=back


=over


=item *

HandshakeMode - which handshake flavour to test:

=over


=item *

Simple - plain handshake (default)

=item *

Resume - test resumption

=item *

RenegotiateServer - test server initiated renegotiation

=item *

RenegotiateClient - test client initiated renegotiation


=back


=back

When HandshakeMode is Resume or Renegotiate, the original handshake is expected
to succeed. All configured test expectations are verified against the second
handshake.


=over


=item *

ApplicationData - amount of application data bytes to send (integer, defaults
to 256 bytes). Applies to both client and server. Application data is sent in
64kB chunks (but limited by MaxFragmentSize and available parallelization, see
below).


=back


=over


=item *

MaxFragmentSize - maximum send fragment size (integer, defaults to 512 in
tests - see C<SSL_CTX_set_max_send_fragment> for documentation). Applies to
both client and server. Lowering the fragment size will split handshake and
application data up between more C<SSL_write> calls, thus allowing to exercise
different code paths. In particular, if the buffer size (64kB) is at least
four times as large as the maximum fragment, interleaved multi-buffer crypto
implementations may be used on some platforms.


=back


=head3 Test expectations



=over


=item *

ExpectedResult - expected handshake outcome. One of

=over


=item *

Success - handshake success

=item *

ServerFail - serverside handshake failure

=item *

ClientFail - clientside handshake failure

=item *

InternalError - some other error


=back


=back


=over


=item *

ExpectedClientAlert, ExpectedServerAlert - expected alert. See
C<ssl_test_ctx.c> for known values. Note: the expected alert is currently
matched against the I<last> received alert (i.e., a fatal alert or a
C<close_notify>). Warning alert expectations are not yet supported. (A warning
alert will not be correctly matched, if followed by a C<close_notify> or
another alert.)


=back


=over


=item *

ExpectedProtocol - expected negotiated protocol. One of
SSLv3, TLSv1, TLSv1.1, TLSv1.2.


=back


=over


=item *

SessionTicketExpected - whether or not a session ticket is expected

=over


=item *

Ignore - do not check for a session ticket (default)

=item *

Yes - a session ticket is expected

=item *

No - a session ticket is not expected


=back


=back


=over


=item *

ResumptionExpected - whether or not resumption is expected (Resume mode only)

=over


=item *

Yes - resumed handshake

=item *

No - full handshake (default)


=back


=back


=over


=item *

ExpectedNPNProtocol, ExpectedALPNProtocol - NPN and ALPN expectations.


=back


=over


=item *

ExpectedTmpKeyType - the expected algorithm or curve of server temp key


=back


=head2 Configuring the client and server


The client and server configurations can be any valid C<SSL_CTX>
configurations. For details, see the manpages for C<SSL_CONF_cmd>.

Give your configurations as a dictionary of CONF commands, e.g.


    server => {
        "CipherString" => "DEFAULT",
        "MinProtocol" => "TLSv1",
    }

The following sections may optionally be defined:


=over


=item *

server2 - this section configures a secondary context that is selected via the
ServerName test option. This context is used whenever a ServerNameCallback is
specified. If the server2 section is not present, then the configuration
matches server.

=item *

resume_server - this section configures the client to resume its session
against a different server. This context is used whenever HandshakeMode is
Resume. If the resume_server section is not present, then the configuration
matches server.

=item *

resume_client - this section configures the client to resume its session with
a different configuration. In practice this may occur when, for example,
upgraded clients reuse sessions persisted on disk.  This context is used
whenever HandshakeMode is Resume. If the resume_client section is not present,
then the configuration matches client.


=back


=head3 Configuring callbacks and additional options


Additional handshake settings can be configured in the C<extra> section of each
client and server:


    client => {
        "CipherString" => "DEFAULT",
        extra => {
            "ServerName" => "server2",
        }
    }


=head4 Supported client-side options



=over


=item *

ClientVerifyCallback - the client's custom certificate verify callback.
Used to test callback behaviour. One of

=over


=item *

None - no custom callback (default)

=item *

AcceptAll - accepts all certificates.

=item *

RejectAll - rejects all certificates.


=back


=back


=over


=item *

ServerName - the server the client should attempt to connect to. One of

=over


=item *

None - do not use SNI (default)

=item *

server1 - the initial context

=item *

server2 - the secondary context

=item *

invalid - an unknown context


=back


=back


=over


=item *

CTValidation - Certificate Transparency validation strategy. One of

=over


=item *

None - no validation (default)

=item *

Permissive - SSL_CT_VALIDATION_PERMISSIVE

=item *

Strict - SSL_CT_VALIDATION_STRICT


=back


=back


=head4 Supported server-side options



=over


=item *

ServerNameCallback - the SNI switching callback to use

=over


=item *

None - no callback (default)

=item *

IgnoreMismatch - continue the handshake on SNI mismatch

=item *

RejectMismatch - abort the handshake on SNI mismatch


=back


=back


=over


=item *

BrokenSessionTicket - a special test case where the session ticket callback
does not initialize crypto.

=over


=item *

No (default)

=item *

Yes


=back


=back


=head4 Mutually supported options



=over


=item *

NPNProtocols, ALPNProtocols - NPN and ALPN settings. Server and client
protocols can be specified as a comma-separated list, and a callback with the
recommended behaviour will be installed automatically.


=back


=head3 Default server and client configurations


The default server certificate and CA files are added to the configurations
automatically. Server certificate verification is requested by default.

You can override these options by redefining them:


    client => {
        "VerifyCAFile" => "/path/to/custom/file"
    }

or by deleting them


    client => {
        "VerifyCAFile" => undef
    }


=head2 Adding a test to the test harness



=over


=item 1.

Add a new test configuration to C<test/ssl-tests>, following the examples of
existing C<*.conf.in> files (for example, C<01-simple.conf.in>).


=back


=over


=item 1.

Generate the generated C<*.conf> test input file. You can do so by running
C<generate_ssl_tests.pl>:


=back


    $ ./config
    $ cd test
    $ TOP=.. perl -I testlib/ generate_ssl_tests.pl ssl-tests/my.conf.in \
      > ssl-tests/my.conf

where C<my.conf.in> is your test input file.

For example, to generate the test cases in C<ssl-tests/01-simple.conf.in>, do


    $ TOP=.. perl -I testlib/ generate_ssl_tests.pl ssl-tests/01-simple.conf.in > ssl-tests/01-simple.conf

Alternatively (hackish but simple), you can comment out


    unlink glob $tmp_file;

in C<test/recipes/80-test_ssl_new.t> and run


    $ make TESTS=test_ssl_new test

This will save the generated output in a C<*.tmp> file in the build directory.


=over


=item 1.

Update the number of tests planned in C<test/recipes/80-test_ssl_new.t>. If
the test suite has any skip conditions, update those too (see
C<test/recipes/80-test_ssl_new.t> for details).


=back


=head2 Running the tests with the test harness



    HARNESS_VERBOSE=yes make TESTS=test_ssl_new test


=head2 Running a test manually


These steps are only needed during development. End users should run C<make test>
or follow the instructions above to run the SSL test suite.

To run an SSL test manually from the command line, the C<TEST_CERTS_DIR>
environment variable to point to the location of the certs. E.g., from the root
OpenSSL directory, do


    $ CTLOG_FILE=test/ct/log_list.conf TEST_CERTS_DIR=test/certs test/ssl_test \
      test/ssl-tests/01-simple.conf

or for shared builds


    $ CTLOG_FILE=test/ct/log_list.conf  TEST_CERTS_DIR=test/certs \
      util/shlib_wrap.sh test/ssl_test test/ssl-tests/01-simple.conf

Note that the test expectations sometimes depend on the Configure settings. For
example, the negotiated protocol depends on the set of available (enabled)
protocols: a build with C<enable-ssl3> has different test expectations than a
build with C<no-ssl3>.

The Perl test harness automatically generates expected outputs, so users who
just run C<make test> do not need any extra steps.

However, when running a test manually, keep in mind that the repository version
of the generated C<test/ssl-tests/*.conf> correspond to expected outputs in with
the default Configure options. To run C<ssl_test> manually from the command line
in a build with a different configuration, you may need to generate the right
C<*.conf> file from the C<*.conf.in> input first.
