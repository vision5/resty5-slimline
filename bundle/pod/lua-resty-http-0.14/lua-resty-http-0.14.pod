=encoding utf-8


=head1 lua-resty-http


Lua HTTP client cosocket driver for L<OpenResty|http://openresty.org/> / L<ngx_lua|https://github.com/openresty/lua-nginx-module>.


=head1 Status


Production ready.


=head1 Features



=over


=item *

HTTP 1.0 and 1.1

=item *

SSL

=item *

Streaming interface to the response body, for predictable memory usage

=item *

Alternative simple interface for singleshot requests without manual connection step

=item *

Chunked and non-chunked transfer encodings

=item *

Keepalive

=item *

Pipelining

=item *

Trailers


=back


=head1 API



=over


=item *

L<new>

=item *

L<connect>

=item *

L<connect_proxy>

=item *

L<set_proxy_options>

=item *

L<set_timeout>

=item *

L<set_timeouts>

=item *

L<ssl_handshake>

=item *

L<set_keepalive>

=item *

L<get_reused_times>

=item *

L<close>

=item *

L<request>

=item *

L<request_uri>

=item *

L<request_pipeline>

=item *

L<Response>

=over


=item *

L<body_reader>

=item *

L<read_body>

=item *

L<read_trailers>

=back


=item *

L<Proxy>

=over


=item *

L<proxy_request>

=item *

L<proxy_response>

=back


=item *

L<Utility>

=over


=item *

L<parse_uri>

=item *

L<get_client_body_reader>


=back


=back


=head2 Synopsis


C<>`` lua
lua_package_path "/path/to/lua-resty-http/lib/?.lua;;";

server {

location /simpleinterface {
resolver 8.8.8.8;  # use Google's open DNS server for an example

    content_by_lua_block {

      -- For simple singleshot requests, use the URI interface.
      local http = require "resty.http"
      local httpc = http.new()
      local res, err = httpc:request_uri("http://example.com/helloworld", {
        method = "POST",
        body = "a=1&b=2",
        headers = {
          ["Content-Type"] = "application/x-www-form-urlencoded",
        },
        keepalive_timeout = 60,
        keepalive_pool = 10
      })

      if not res then
        ngx.say("failed to request: ", err)
        return
      end

      -- In this simple form, there is no manual connection step, so the body is read
      -- all in one go, including any trailers, and the connection closed or keptalive
      -- for you.

      ngx.status = res.status

      for k,v in pairs(res.headers) do
          --
      end

      ngx.say(res.body)
    }
}

location /genericinterface {
content_by_lua_block {

      local http = require "resty.http"
      local httpc = http.new()

      -- The generic form gives us more control. We must connect manually.
      httpc:set_timeout(500)
      httpc:connect("127.0.0.1", 80)

      -- And request using a path, rather than a full URI.
      local res, err = httpc:request({
          path = "/helloworld",
          headers = {
              ["Host"] = "example.com",
          },
      })

      if not res then
        ngx.say("failed to request: ", err)
        return
      end

      -- Now we can use the body_reader iterator, to stream the body according to our desired chunk size.
      local reader = res.body_reader

      repeat
        local chunk, err = reader(8192)
        if err then
          ngx.log(ngx.ERR, err)
          break
        end

        if chunk then
          -- process
        end
      until not chunk

      local ok, err = httpc:set_keepalive()
      if not ok then
        ngx.say("failed to set keepalive: ", err)
        return
      end
    }
}
}
C<>``


=head1 Connection



=head2 new


C<syntax: httpc = http.new()>

Creates the http object. In case of failures, returns C<nil> and a string describing the error.


=head2 connect


C<syntax: ok, err = httpc:connect(host, port, options_table?)>

C<syntax: ok, err = httpc:connect("unix:/path/to/unix.sock", options_table?)>

Attempts to connect to the web server.

Before actually resolving the host name and connecting to the remote backend, this method will always look up the connection pool for matched idle connections created by previous calls of this method.

An optional Lua table can be specified as the last argument to this method to specify various connect options:


=over


=item *

C<pool>
: Specifies a custom name for the connection pool being used. If omitted, then the connection pool name will be generated from the string template C<< <host>:<port> >> or C<< <unix-socket-path> >>.


=back


=head2 connect_proxy


C<syntax: ok, err = httpc:connect_proxy(proxy_uri, scheme, host, port, proxy_authorization)>

Attempts to connect to the web server through the given proxy server. The method accepts the following arguments:


=over


=item *

C<proxy_uri> - Full URI of the proxy server to use (e.g. C<http://proxy.example.com:3128/>). Note: Only C<http> protocol is supported.

=item *

C<scheme> - The protocol to use between the proxy server and the remote host (C<http> or C<https>). If C<https> is specified as the scheme, C<connect_proxy()> makes a C<CONNECT> request to establish a TCP tunnel to the remote host through the proxy server.

=item *

C<host> - The hostname of the remote host to connect to.

=item *

C<port> - The port of the remote host to connect to.

=item *

C<proxy_authorization> - The C<Proxy-Authorization> header value sent to the proxy server via C<CONNECT> when the C<scheme> is C<https>.


=back

If an error occurs during the connection attempt, this method returns C<nil> with a string describing the error. If the connection was successfully established, the method returns C<1>.

There's a few key points to keep in mind when using this api:


=over


=item *

If the scheme is C<https>, you need to perform the TLS handshake with the remote server manually using the C<ssl_handshake()> method before sending any requests through the proxy tunnel.

=item *

If the scheme is C<http>, you need to ensure that the requests you send through the connections conforms to L<RFC 7230|https://tools.ietf.org/html/rfc7230> and especially L<Section 5.3.2.|https://tools.ietf.org/html/rfc7230#section-5.3.2> which states that the request target must be in absolute form. In practice, this means that when you use C<send_request()>, the C<path> must be an absolute URI to the resource (e.g. C<http://example.com/index.html> instead of just C</index.html>).


=back


=head2 set_timeout


C<syntax: httpc:set_timeout(time)>

Sets the timeout (in ms) protection for subsequent operations, including the C<connect> method.


=head2 set_timeouts


C<syntax: httpc:set_timeouts(connect_timeout, send_timeout, read_timeout)>

Sets the connect timeout threshold, send timeout threshold, and read timeout threshold, respectively, in milliseconds, for subsequent socket operations (connect, send, receive, and iterators returned from receiveuntil).


=head2 ssl_handshake


C<syntax: session, err = httpc:ssl_handshake(session, host, verify)>

Performs an SSL handshake on the TCP connection, only available in ngx_lua E<gt> v0.9.11

See docs for L<ngx.socket.tcp|https://github.com/openresty/lua-nginx-module#ngxsockettcp> for details.


=head2 set_keepalive


C<syntax: ok, err = httpc:set_keepalive(max_idle_timeout, pool_size)>

Attempts to puts the current connection into the ngx_lua cosocket connection pool.

You can specify the max idle timeout (in ms) when the connection is in the pool and the maximal size of the pool every nginx worker process.

Only call this method in the place you would have called the C<close> method instead. Calling this method will immediately turn the current http object into the C<closed> state. Any subsequent operations other than C<connect()> on the current object will return the C<closed> error.

Note that calling this instead of C<close> is "safe" in that it will conditionally close depending on the type of request. Specifically, a C<1.0> request without C<Connection: Keep-Alive> will be closed, as will a C<1.1> request with C<Connection: Close>.

In case of success, returns C<1>. In case of errors, returns C<nil, err>. In the case where the connection is conditionally closed as described above, returns C<2> and the error string C<connection must be closed>.


=head2 set_proxy_options


C<syntax: httpc:set_proxy_options(opts)>

Configure an http proxy to be used with this client instance. The C<opts> is a table that accepts the following fields:


=over


=item *

C<http_proxy> - an URI to a proxy server to be used with http requests

=item *

C<http_proxy_authorization> - a default C<Proxy-Authorization> header value to be used with C<http_proxy>, e.g. C<Basic ZGVtbzp0ZXN0>, which will be overriden if the C<Proxy-Authorization> request header is present.

=item *

C<https_proxy> - an URI to a proxy server to be used with https requests

=item *

C<https_proxy_authorization> - as C<http_proxy_authorization> but for use with C<https_proxy>.

=item *

C<no_proxy> - a comma separated list of hosts that should not be proxied.


=back

Note that proxy options are only applied when using the high-level C<request_uri()> API.


=head2 get_reused_times


C<syntax: times, err = httpc:get_reused_times()>

This method returns the (successfully) reused times for the current connection. In case of error, it returns C<nil> and a string describing the error.

If the current connection does not come from the built-in connection pool, then this method always returns C<0>, that is, the connection has never been reused (yet). If the connection comes from the connection pool, then the return value is always non-zero. So this method can also be used to determine if the current connection comes from the pool.


=head2 close


C<syntax: ok, err = http:close()>

Closes the current connection and returns the status.

In case of success, returns C<1>. In case of errors, returns C<nil> with a string describing the error.


=head1 Requesting



=head2 request


C<syntax: res, err = httpc:request(params)>

Returns a C<res> table or C<nil> and an error message.

The C<params> table accepts the following fields:


=over


=item *

C<version> The HTTP version number, currently supporting 1.0 or 1.1.

=item *

C<method> The HTTP method string.

=item *

C<path> The path string.

=item *

C<query> The query string, presented as either a literal string or Lua table..

=item *

C<headers> A table of request headers.

=item *

C<body> The request body as a string, or an iterator function (see L<get_client_body_reader>).

=item *

C<ssl_verify> Verify SSL cert matches hostname


=back

When the request is successful, C<res> will contain the following fields:


=over


=item *

C<status> The status code.

=item *

C<reason> The status reason phrase.

=item *

C<headers> A table of headers. Multiple headers with the same field name will be presented as a table of values.

=item *

C<has_body> A boolean flag indicating if there is a body to be read.

=item *

C<body_reader> An iterator function for reading the body in a streaming fashion.

=item *

C<read_body> A method to read the entire body into a string.

=item *

C<read_trailers> A method to merge any trailers underneath the headers, after reading the body.


=back


=head2 request_uri


C<syntax: res, err = httpc:request_uri(uri, params)>

The simple interface. Options supplied in the C<params> table are the same as in the generic interface, and will override components found in the uri itself.

There are 3 additional parameters for controlling keepalives:


=over


=item *

C<keepalive> Set to C<false> to disable keepalives and immediately close the connection.

=item *

C<keepalive_timeout> The maximal idle timeout (ms). Defaults to C<lua_socket_keepalive_timeout>.

=item *

C<keepalive_pool> The maximum number of connections in the pool. Defaults to C<lua_socket_pool_size>.


=back

In this mode, there is no need to connect manually first. The connection is made on your behalf, suiting cases where you simply need to grab a URI without too much hassle.

Additionally there is no ability to stream the response body in this mode. If the request is successful, C<res> will contain the following fields:


=over


=item *

C<status> The status code.

=item *

C<headers> A table of headers.

=item *

C<body> The response body as a string.


=back


=head2 request_pipeline


C<syntax: responses, err = httpc:request_pipeline(params)>

This method works as per the L<request> method above, but C<params> is instead a table of param tables. Each request is sent in order, and C<responses> is returned as a table of response handles. For example:


    local responses = httpc:request_pipeline{
      {
        path = "/b",
      },
      {
        path = "/c",
      },
      {
        path = "/d",
      }
    }
    
    for i,r in ipairs(responses) do
      if r.status then
        ngx.say(r.status)
        ngx.say(r:read_body())
      end
    end

Due to the nature of pipelining, no responses are actually read until you attempt to use the response fields (status / headers etc). And since the responses are read off in order, you must read the entire body (and any trailers if you have them), before attempting to read the next response.

Note this doesn't preclude the use of the streaming response body reader. Responses can still be streamed, so long as the entire body is streamed before attempting to access the next response.

Be sure to test at least one field (such as status) before trying to use the others, in case a socket read error has occurred.


=head1 Response



=head2 res.body_reader


The C<body_reader> iterator can be used to stream the response body in chunk sizes of your choosing, as follows:

C<>``lua
local reader = res.body_reader

repeat
local chunk, err = reader(8192)
if err then
ngx.log(ngx.ERR, err)
break
end

if chunk then
-- process
end
until not chunk
C<>``

If the reader is called with no arguments, the behaviour depends on the type of connection. If the response is encoded as chunked, then the iterator will return the chunks as they arrive. If not, it will simply return the entire body.

Note that the size provided is actually a B<maximum> size. So in the chunked transfer case, you may get chunks smaller than the size you ask, as a remainder of the actual HTTP chunks.


=head2 res:read_body


C<syntax: body, err = res:read_body()>

Reads the entire body into a local string.


=head2 res:read_trailers


C<syntax: res:read_trailers()>

This merges any trailers underneath the C<res.headers> table itself. Must be called after reading the body.


=head1 Proxy


There are two convenience methods for when one simply wishes to proxy the current request to the connected upstream, and safely send it downstream to the client, as a reverse proxy. A complete example:


    local http = require "resty.http"
    local httpc = http.new()
    
    httpc:set_timeout(500)
    local ok, err = httpc:connect(HOST, PORT)
    
    if not ok then
      ngx.log(ngx.ERR, err)
      return
    end
    
    httpc:set_timeout(2000)
    httpc:proxy_response(httpc:proxy_request())
    httpc:set_keepalive()


=head2 proxy_request


C<syntax: local res, err = httpc:proxy_request(request_body_chunk_size?)>

Performs a request using the current client request arguments, effectively proxying to the connected upstream. The request body will be read in a streaming fashion, according to C<request_body_chunk_size> (see L<documentation on the client body reader> below).


=head2 proxy_response


C<syntax: httpc:proxy_response(res, chunksize?)>

Sets the current response based on the given C<res>. Ensures that hop-by-hop headers are not sent downstream, and will read the response according to C<chunksize> (see L<documentation on the body reader> above).


=head1 Utility



=head2 parse_uri


C<syntax: local scheme, host, port, path, query? = unpack(httpc:parse_uri(uri, query_in_path?))>

This is a convenience function allowing one to more easily use the generic interface, when the input data is a URI.

As of version C<0.10>, the optional C<query_in_path> parameter was added, which specifies whether the querystring is to be included in the C<path> return value, or separately as its own return value. This defaults to C<true> in order to maintain backwards compatibility. When set to C<false>, C<path> will only include the path, and C<query> will contain the URI args, not including the C<?> delimiter.


=head2 get_client_body_reader


C<syntax: reader, err = httpc:get_client_body_reader(chunksize?, sock?)>

Returns an iterator function which can be used to read the downstream client request body in a streaming fashion. You may also specify an optional default chunksize (default is C<65536>), or an already established socket in
place of the client request.

Example:


    local req_reader = httpc:get_client_body_reader()
    
    repeat
      local chunk, err = req_reader(8192)
      if err then
        ngx.log(ngx.ERR, err)
        break
      end
    
      if chunk then
        -- process
      end
    until not chunk

This iterator can also be used as the value for the body field in request params, allowing one to stream the request body into a proxied upstream request.


    local client_body_reader, err = httpc:get_client_body_reader()
    
    local res, err = httpc:request{
       path = "/helloworld",
       body = client_body_reader,
    }

If C<sock> is specified,


=head1 Author


James Hurst E<lt>james@pintsized.co.ukE<gt>

Originally started life based on https://github.com/bakins/lua-resty-http-simple. Cosocket docs and implementation borrowed from the other lua-resty-* cosocket modules.


=head1 Licence


This module is licensed under the 2-clause BSD license.

Copyright (c) 2013-2016, James Hurst E<lt>james@pintsized.co.ukE<gt>

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:


=over


=item *

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.


=back


=over


=item *

Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.


=back

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
