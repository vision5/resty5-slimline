=encoding utf-8


=head1 lua-resty-consul

Library to interface with the consul HTTP API from ngx_lua


=head1 Overview


Methods all return a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
The response body has been read and set to C<res.body>, JSON decoded if the response has a C<Content-Type> header of C<Application/JSON>.

All response headers are available at C<res.headers>.

The ACL Token parameter is always sent as the C<X-Consul-Token> header rather than being included in the query string.

If C<wait> or C<index> arguments are provided the request read timeout is extended appropriately.  
C<wait> must be passed as a number of seconds, do not include C<s> or any other unit string.


    local resty_consul = require('resty.consul')
    local consul = resty_consul:new({
            host            = "127.0.0.1",
            port            = 8500,
            connect_timeout = (60*1000), -- 60s
            read_timeout    = (60*1000), -- 60s
            default_args    = {
                token = "my-default-token"
            },
            ssl             = false,
            ssl_verify      = true,
            sni_host        = nil,
        })
    
    local res, err = consul:get('/agent/services')
    if not res then
        ngx.log(ngx.ERR, err)
        return
    end
    
    ngx.print(res.status) -- 200
    local services = res.body -- JSON decoded response
    
    
    local res, err = consul:put('/agent/service/register', my_service_definition, { token = "override-token" })
    if not res then
        ngx.log(ngx.ERR, err)
        return
    end
    
    ngx.print(res.status) -- 200
    ngx.print(res.headers["X-Consul-Knownleader"]) -- "true"
    local service_register_response = res.body -- JSON decoded response
    
    
    local res, err = consul:list_keys() -- Get all keys
    if not res then
        ngx.log(ngx.ERR, err)
        return
    end
    
    local keys = {}
    if res.status == 200 then
        keys = res.body
    end
    
    for _, key in ipairs(keys) do
        local res, err = consul:get_key(key)
        if not res then
            ngx.log(ngx.ERR, err)
            return
        end
    
        ngx.print(res.body[1].Value) -- Key value after base64 decoding
    end


=head1 Dependencies



=over


=item *

L<lua-resty-http|https://github.com/pintsized/lua-resty-http>


=back


=head1 Basic Methods



=head3 new


C<syntax: client = consul:new(opts?)>

Create a new consul client. C<opts> is a table setting the following options:


=over


=item *

C<host> Defaults to 127.0.0.1

=item *

C<port> Defaults to 8500. Set to C<0> if using a unix socket as C<host>.

=item *

C<connect_timeout> Connection timeout in ms. Defaults to 60s

=item *

C<read_timeout> Read timeout in ms. Defaults to 60s

=item *

C<default_args> Table of query string arguments to send with all requests (e.g. C<token>) Defaults to empty

=item *

C<ssl> Boolean, enable HTTPS requests. Default to C<false>.

=item *

C<ssl_verify> Boolean, verify SSL certificates. Defaults to C<true>      = true,

=item *

C<sni_host> Hostname to use when verifying SSL certs.


=back


=head3 get


C<syntax: res, err = consul:get(path, args?)>

Performs a GET request to the provided path. API Version is automatically prepended.

C<args> is a table of query string parameters to add to the URI.

Returns a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
On error returns C<nil> and an error message.


=head3 put


C<syntax: res, err = consul:put(path, body, args?)>

Performs a PUT request to the provided path. API Version is automatically prepended.

C<args> is table of query string parameters to add to the URI.

If C<body> is a table or boolean value it is automatically json encoded before being sent.   
Otherwise anything that L<lua-resty-http|https://github.com/pintsized/lua-resty-http> accepts as a body input is valid.

Returns a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
On error returns C<nil> and an error message.


=head3 delete


C<syntax: res, err = consul:delete(path, args?)>

Performs a GET request to the provided path. API Version is automatically prepended.

C<args> is a table of query string parameters to add to the URI.

Returns a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
On error returns C<nil> and an error message.


=head3 get_client_body_reader


Proxy method to L<lua-resty-http|https://github.com/pintsized/lua-resty-http#get_client_body_reader>


=head1 Key Value Helpers


These methods automatically prepend C</v1/kv>, only the actual key should be passed.  
Base64 encoded values are automatically decoded.


=head3 get_key


C<syntax: res, err = consul:get_key(key, args?)>

Retrieve a Consul KV key. Values are Base64 decoded.

C<args> is a table of query string parameters to add to the URI.

Returns a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
On error returns C<nil> and an error message.


=head3 put_key


C<syntax: res, err = consul:put_key(key, value, args?)>

Create or update a KV key.

C<args> is table of query string parameters to add to the URI.

If C<value> is a table or boolean value it is automatically json encoded before being sent.   
Otherwise anything that L<lua-resty-http|https://github.com/pintsized/lua-resty-http> accepts as a body input is valid.

Returns a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
On error returns C<nil> and an error message.


=head3 delete


C<syntax: res, err = consul:delete_key(key, args?)>

Delete a KV entry.

C<args> is a table of query string parameters to add to the URI.

Returns a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
On error returns C<nil> and an error message.


=head3 list_keys


C<syntax: res, err = consul:list_keys(prefix?, args?)>

Retrieve all the keys in the KV strore. Optionally within a C<prefix>.

C<args> is a table of query string parameters to add to the URI.   
C<keys> is always set as a query string parameter with this method

Returns a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
On error returns C<nil> and an error message.


=head1 Transaction helper



=head3 txn


C<syntax: res, err = consul:txn(payload, args?)>

Performs a C<PUT> request  to the C</v1/txn> API endpoint with the provided payload.

C<payload> can be provided as a Lua table, in which case C<Value> keys will be automatically base64 encoded.  
Otherwise anything that L<lua-resty-http|https://github.com/pintsized/lua-resty-http> accepts as a body input is valid.

Returns a L<lua-resty-http|https://github.com/pintsized/lua-resty-http> response object.  
On error returns C<nil> and an error message.

KV values in the response body are automatically base64 decoded.


    local txn_payload = {
        {
            KV = {
                Verb   = "set",
                Key    = "foo",
                Value  = "bar",
            }
        },
        {
            KV = {
                Verb   = "get",
                Key    = "foobar",
            }
        }
    }
    
    local consul = resty_consul:new()
    
    local res, err = consul:txn(txn_payload)
    if not res then
        ngx.say(err)
        return
    end
    
    ngx.say(res.body.Results[2].KV.Value) -- "bar"
