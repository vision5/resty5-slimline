=encoding utf-8


=head1 lua-resty-post

Openresty utility for HTTP post


=head1 Status

This library beta tested and used in production.


=head1 Description

This library processed HTTP using L<lua-resty-upload|https://github.com/openresty/lua-resty-upload> which very fast and low memory used, it handles multiple type of HTTP POST and converted into lua table:

=over


=item *

application/x-www-form-urlencoded

=item *

application/json

=item *

multipart/form-data

=over


=item *

L<FormData|https://developer.mozilla.org/en-US/docs/Web/API/FormData>

=item *

L<File Upload>

=item *

L<Array Input>


=back


=back




=head1 Installation


=over


=item *

Download or clone this repo

=item *

copy or link to openresty/lualib/resty/ or to any your lua_package_path


=back




=head1 How to use


    local resty_post = require 'resty.post'
    local post = resty_post:new()
    local m = post:read()
    -- return table with all form value and file




=head1 File Upload


=over


=item *

Support multiple file upload

=item *

Files info are stored in files property using field name as key

     { 
      files = {
       file1 = { -- input name
        name = "a.txt",
        type = "text/plain",
        size = 10240,
        tmp_name = 1454551131.5459
       },
       file2 = {
        name = "b.png",
        type = "image/png",
        size = 20480,
        tmp_name = 1454553275.6401
       }
     }


=back


=over


=item *

Define path for files upload or default to logs directory (follow ngx.config.prefix)

=item *

Default file will be saved to tmp name (require moving action to destination)

    local resty_post = require "resty.post"
    local post = resty_post:new({
     path = "/my/path",           -- path upload file will be saved
     chunk_size = 10240,          -- default 8192
     no_tmp = true,               -- if set original name will uses or generate random name
     name = function(name, field) -- overide name with user defined function
      return name.."_"..field 
     end
    })
    post:read()


=back


=head1 Array Input


=head2 Support multiple input of similar name

It is useful for thing like HTML input checkboxes or select in multiple mode

    <input type="checkbox" name="check_multi" value="1">
    <input type="checkbox" name="check_multi" value="2">
    <select name="select_multi" multiple>
     <option value="">Please select</option>
     <option value="1">One</option>
     <option value="2">Two</option>
    </select>

converted into

    {
     check_multi = { 1, 2 },
     select_multi = { 1, 2 } 
    }

When checked one similar with L<ngx.req.get_post_args|https://github.com/openresty/lua-nginx-module#ngxreqget_post_args>

    {
     check_multi = 2,
     select_multi = 1
    }


=head2 Support array input with name

This is like supporting input which mimic class and property, which can be uses to handle dynamic input
support PHP style (dynamic language) and ASP.NET MVC binding style (static language which uses class)

    <div class="name-index">
     <input name="name[1]" value="Foo">
     <input name="name[0]" value="Bar">
    </div>
    <div class="user-single">
     <input name="user.title" value="Mr.">
     <input name="user[name]" value="Foo Bar">
    </div>
    <div class="user-static">
     <input name="users[0].title" value="Mr.">
     <input name="users[0].name" value="John Do">
    </div>
    <div class="user-dynamic">
     <input name="users[0][title]" value="Ms.">
     <input name="users[0][name]" value="Jane Do">
    </div>

converted into

    {
     name = {
      "Bar",
      "Foo"
     },
     user = {
      title = "Mr.",
      name = "Foo Bar"
     },
     users = {
      {
       title = "Mr.",
       name = "John Do"
      },
      {
       title = "Ms.",
       name = "Jane Do"
      }
     }
    }




=head1 Copyright and License

This module is licensed under the BSD license.

Copyright (C) 2015, by Anton Heryanto Hasan.

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:


=over


=item *

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.


=back


=over


=item *

Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.


=back

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.




=head1 See Also


=over


=item *

L<lua-resty-stack|https://github.com/antonheryanto/lua-resty-stack> 

=item *

L<lua-resty-upload|https://github.com/openresty/lua-resty-upload>

=item *

L<lua-nginx-module|https://github.com/openresty/lua-nginx-module>


=back


